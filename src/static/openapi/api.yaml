openapi: 3.0.2
info:
  title: Mesage interface
  description: This interface provides registration controll messages
  version: 0.1.9
servers:
  - url: '{protocol}://{server}:{port}'
    description: Optional server description, e.g. Main (production) server
paths:
  "/token":
    post:
      tags:
        - Auth
      operationId: "token"
      summary: Token
      description: Token for User
      requestBody:
        $ref: '#/components/requestBodies/UserDto'

      responses:
        '200':
          description: Token For user
          content:
            application/json:
              schema:
                type: "string"
  "/sign-up":
    post:
      tags:
        - Auth
      operationId: "sign-up"
      summary: sign-up
      description: sign-up User
      requestBody:
        $ref: '#/components/requestBodies/UserDto'

      responses:
        '200':
          description: sign-up user
          content:
            application/json:
              schema:
                type: "string"
  "/chat/{chat}":
    parameters:
      - name: chat
        in: path
        description: chat
        required: true
        schema:
          type: string
    post:
      tags:
        - Chat
      operationId: "createChat"
      summary: create Chat
      description: chat
      parameters:
        - name: age
          in: query
          description: age
          required: true
          schema:
            type: integer

      responses:
        '200':
          description: chat
    delete:
      tags:
        - Chat
      operationId: "deleteChat"
      summary: delete Chat
      description: chat

      responses:
        '200':
          description: delete chat
  "/chat/{chat}/UsersInChat":
    parameters:
      - name: chat
        in: path
        description: chat
        required: true
        schema:
          type: string
    post:
      tags:
        - UserAtChat
      operationId: "AddUserAtChat"
      summary: Add User At Chat
      description: chat
      parameters:
        - name: userLogin
          in: query
          description: user login
          schema:
            type: string
      responses:
        '200':
          description: chat
    delete:
      tags:
        - UserAtChat
      operationId: "deleteUserFromChat"
      summary: Delete User From Chat
      description: chat
      parameters:
        - name: userLogin
          in: query
          description: user login
          schema:
            type: string
      responses:
        '200':
          description: delete user from chat
  "/msg/{chat}":
    parameters:
      - name: chat
        in: path
        description: user chat
        required: true
        schema:
          type: string
    post:
      tags:
        - Msg
      operationId: "sendToChatMessage"
      summary: Send Message
      description: Send Message on Correction
      requestBody:
        $ref: '#/components/requestBodies/MessageDto'

      responses:
        '200':
          description: Msg
    get:
      tags:
        - Msg
      operationId: "get All Cache Messages From Chat Or Find By Author"
      summary: get All Cache Messages
      description: get Message after Correction
      parameters:
        - name: author
          in: query
          description: user login
          schema:
            type: string

      responses:
        "200":
          description: Accepted
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/MessageDto"
  "/checkChat":
    get:
      tags:
        - Check
      operationId: " Check User Consists In Chat"
      summary: Check User Consists In Chat
      description: Check User Consists In Chat
      parameters:
        - name: chatName
          in: query
          description: chat name
          schema:
            type: string
        - name: userLogin
          in: query
          description: UserLogin
          schema:
            type: string
        - name: host
          in: query
          description: rights host
          schema:
            type: string

      responses:
        '200':
          description: User have a chat
        '403':
          description: User dont have a chat
    post:
      tags:
        - Check
      operationId: " Check User Auth"
      summary: Check User Auth
      description: Check User Auth
      parameters:
        - name: userLogin
          in: query
          description: UserLogin
          schema:
            type: string
        - name: host
          in: query
          description: rights host
          schema:
            type: string

      responses:
        '200':
          description: User have a chat
        '403':
          description: User dont have a chat

  "/word/censor":
    post:
      tags:
        - Censor
      operationId: "Censor WordCreate"
      summary: Censor Word
      description: Censor Word for Message on Correction
      requestBody:
        $ref: '#/components/requestBodies/WordDto'
      responses:
        '200':
          description: Msg
    delete:
      tags:
        - Censor
      operationId: "Censor Word Delete"
      summary: Censor Word Delete
      description: Censor delete Word for Message on Correction
      requestBody:
        $ref: '#/components/requestBodies/WordDto'
      responses:
        '200':
          description: Msg





components:

  requestBodies:
    UserDto:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/UserDto'
          examples:
            eventParametersExample:
              $ref: '#/components/examples/UserDto'
      required: true
      description: Event creation parameters
    MessageDto:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/MessageDto'
          examples:
            eventParametersExample:
              $ref: '#/components/examples/MessageDto'
      required: true
      description: Event creation parameters
    WordDto:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/WordDto'
          examples:
            eventParametersExample:
              $ref: '#/components/examples/WordDto'
      required: true
      description: Event creation parameters
  schemas:
    UserDto: # Schema name
      type: object
      properties:
        login:
          type: string
        password:
          type: string
        age:
          type: integer
          minimum: 0
      required:
        - login
        - password
      example: # Object-level efimov
        login: BigBOy
        password: Terminator111
    MessageDto: # Schema name
      type: object
      properties:
        author:
          type: string
        age:
          type: integer
        message:
          type: string
        dateAndTime:
          type: string
        chat:
          type: string
      required:
        - message
      example: # Object-level efimov
        login: BigBOy
        password: Terminator111
    WordDto:
      type: object
      properties:
        chat:
          type: string
        forbiddenWord:
          type: string
      required:
        - chat
        - forbiddenWord
      example: # Object-level efimov
        forbiddenWord: "Terminator"
  examples:
    UserDto:
      value:
        login: BigBOy
        password: Terminator111
    MessageDto:
      value:
        author: BigBOy
        message: My password Terminator111
    WordDto:
      value:

        forbiddenWord: "Terminate"
